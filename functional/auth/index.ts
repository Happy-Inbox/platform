/**
 * @packageDocumentation
 * @module api.functional.auth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Credentials } from "google-auth-library/build/src/auth/credentials";

import type { ExchangeTokenBody } from "../../auth.controller.types";
import type { AuthorizationHeaders } from "../../core.types";

/**
 * @controller AuthController.exchangeToken
 * @path POST /auth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function exchangeToken(
    connection: IConnection,
    body: exchangeToken.Input,
): Promise<exchangeToken.Output> {
    return PlainFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...exchangeToken.METADATA,
            path: exchangeToken.path(),
        } as const,
        body,
    );
}
export namespace exchangeToken {
    export type Input = Primitive<ExchangeTokenBody>;
    export type Output = Primitive<Credentials>;

    export const METADATA = {
        method: "POST",
        path: "/auth",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/auth`;
    }
}

/**
 * @controller AuthController.storeToken
 * @path PUT /auth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function storeToken(
    connection: IConnection<storeToken.Headers>,
    body: storeToken.Input,
): Promise<void> {
    return PlainFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...storeToken.METADATA,
            path: storeToken.path(),
        } as const,
        body,
    );
}
export namespace storeToken {
    export type Headers = Resolved<AuthorizationHeaders>;
    export type Input = Primitive<Credentials>;

    export const METADATA = {
        method: "PUT",
        path: "/auth",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/auth`;
    }
}