/**
 * @packageDocumentation
 * @module api.functional.mail
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { AuthorizationHeaders } from "../../core.types";
import type { DeleteEmailRequest, GetEmailRequest } from "../../mail.controller.types";

export * as sync from "./sync";
export * as senders from "./senders";

/**
 * Get a single email for full view
 * 
 * @controller MailController.getEmail
 * @path GET /mail/:emailId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getEmail(
    connection: IConnection<getEmail.Headers>,
    emailId: string,
): Promise<getEmail.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...getEmail.METADATA,
            path: getEmail.path(emailId),
        } as const,
    );
}
export namespace getEmail {
    export type Headers = Resolved<AuthorizationHeaders>;
    export type Output = Primitive<GetEmailRequest.Response>;

    export const METADATA = {
        method: "GET",
        path: "/mail/:emailId",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (emailId: string): string => {
        return `/mail/${encodeURIComponent(emailId ?? "null")}`;
    }
}

/**
 * Delete a single email
 * 
 * @controller MailController.deleteEmails
 * @path DELETE /mail
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteEmails(
    connection: IConnection<deleteEmails.Headers>,
    query: deleteEmails.Query,
): Promise<deleteEmails.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...deleteEmails.METADATA,
            path: deleteEmails.path(query),
        } as const,
    );
}
export namespace deleteEmails {
    export type Headers = Resolved<AuthorizationHeaders>;
    export type Query = Resolved<DeleteEmailRequest.QueryParams>;
    export type Output = Primitive<DeleteEmailRequest.Response>;

    export const METADATA = {
        method: "DELETE",
        path: "/mail",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (query: deleteEmails.Query): string => {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/mail${encoded.length ? `?${encoded}` : ""}`;;
    }
}