/**
 * @packageDocumentation
 * @module api.functional.mail.senders.emails
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { AuthorizationHeaders } from "../../../../core.types";
import type { GetEmailsRequest } from "../../../../mail.controller.types";

/**
 * Get List of emails from a {@link senderId }. A maximum of 100 emails is sent in one request
 * 
 * @param senderId Sender ID
 * @returns List of Emails
 * 
 * @controller MailController.getEmails
 * @path GET /mail/senders/:senderId/emails
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getEmails(
    connection: IConnection<getEmails.Headers>,
    senderId: number,
    query: getEmails.Query,
): Promise<getEmails.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...getEmails.METADATA,
            path: getEmails.path(senderId, query),
        } as const,
    );
}
export namespace getEmails {
    export type Headers = Resolved<AuthorizationHeaders>;
    export type Query = Resolved<GetEmailsRequest.QueryParams>;
    export type Output = Primitive<GetEmailsRequest.Response>;

    export const METADATA = {
        method: "GET",
        path: "/mail/senders/:senderId/emails",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (senderId: number, query: getEmails.Query): string => {
        const variables: Record<any, any> = query as any;
        const search: URLSearchParams = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined) continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded: string = search.toString();
        return `/mail/senders/${encodeURIComponent(senderId ?? "null")}/emails${encoded.length ? `?${encoded}` : ""}`;;
    }
}