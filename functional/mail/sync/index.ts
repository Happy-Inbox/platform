/**
 * @packageDocumentation
 * @module api.functional.mail.sync
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { SyncRequest } from "../../../../src/controllers/mail/mail.controller.types";
import type { AuthorizationHeaders } from "../../../../src/core.types";

/**
 * Sync emails in the beginning of the network calls
 * 
 * @returns List of Senders
 * 
 * @controller MailController.syncEmails
 * @path GET /mail/sync
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function syncEmails(
    connection: IConnection<syncEmails.Headers>,
): Promise<syncEmails.Output> {
    return PlainFetcher.fetch(
        connection,
        {
            ...syncEmails.METADATA,
            path: syncEmails.path(),
        } as const,
    );
}
export namespace syncEmails {
    export type Headers = Resolved<AuthorizationHeaders>;
    export type Output = Primitive<SyncRequest.Response>;

    export const METADATA = {
        method: "GET",
        path: "/mail/sync",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/mail/sync`;
    }
}